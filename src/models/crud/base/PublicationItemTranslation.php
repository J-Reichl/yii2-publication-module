<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace dmstr\modules\publication\models\crud\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "{{%dmstr_publication_item_translation}}".
 *
 * @property integer $id
 * @property integer $item_id
 * @property integer $publication_category_id
 * @property string $language_code
 * @property string $title
 * @property string $content_widget_json
 * @property string $teaser_widget_json
 * @property string $status
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property \dmstr\modules\publication\models\crud\PublicationCategoryTranslation $publicationCategory
 * @property \dmstr\modules\publication\models\crud\PublicationItem $item
 * @property string $aliasModel
 */
abstract class PublicationItemTranslation extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const STATUS_DRAFT = 'draft';
    const STATUS_PUBLISHED = 'published';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%dmstr_publication_item_translation}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['item_id', 'publication_category_id', 'language_code'], 'required'],
            [['item_id', 'publication_category_id'], 'integer'],
            [['content_widget_json', 'teaser_widget_json', 'status'], 'string'],
            [['language_code'], 'string', 'max' => 8],
            [['title'], 'string', 'max' => 80],
            [['publication_category_id'], 'exist', 'skipOnError' => true, 'targetClass' => \dmstr\modules\publication\models\crud\PublicationCategoryTranslation::className(), 'targetAttribute' => ['publication_category_id' => 'id']],
            [['item_id'], 'exist', 'skipOnError' => true, 'targetClass' => \dmstr\modules\publication\models\crud\PublicationItem::className(), 'targetAttribute' => ['item_id' => 'id']],
            ['status', 'in', 'range' => [
                    self::STATUS_DRAFT,
                    self::STATUS_PUBLISHED,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'item_id' => Yii::t('models', 'Item ID'),
            'publication_category_id' => Yii::t('models', 'Publication Category ID'),
            'language_code' => Yii::t('models', 'Language Code'),
            'title' => Yii::t('models', 'Title'),
            'content_widget_json' => Yii::t('models', 'Content Widget Json'),
            'teaser_widget_json' => Yii::t('models', 'Teaser Widget Json'),
            'status' => Yii::t('models', 'Status'),
            'created_at' => Yii::t('models', 'Created At'),
            'updated_at' => Yii::t('models', 'Updated At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPublicationCategory()
    {
        return $this->hasOne(\dmstr\modules\publication\models\crud\PublicationCategoryTranslation::className(), ['id' => 'publication_category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getItem()
    {
        return $this->hasOne(\dmstr\modules\publication\models\crud\PublicationItem::className(), ['id' => 'item_id']);
    }


    
    /**
     * @inheritdoc
     * @return \dmstr\modules\publication\models\crud\query\PublicationItemTranslationQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \dmstr\modules\publication\models\crud\query\PublicationItemTranslationQuery(get_called_class());
    }


    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value){
        $labels = self::optsStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus()
    {
        return [
            self::STATUS_DRAFT => Yii::t('models', self::STATUS_DRAFT),
            self::STATUS_PUBLISHED => Yii::t('models', self::STATUS_PUBLISHED),
        ];
    }

}
